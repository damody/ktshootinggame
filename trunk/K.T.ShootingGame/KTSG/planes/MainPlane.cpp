//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : MainPlane.cpp
//  @ Date : 2011/8/30
//  @ Author : 
//
//

#include "MainPlane.h"
#include "DX11/InputState.h"
#include "algo/sgmath.h"
#include "DX11/InitDirect3DApp.h"
#include "global.h"
#include "DX11/WaveSound.h"
#include <iostream>

void MainPlane::Update(float dt) 
{
	if(motherShip)
	{
		m_position = motherShip->m_position + GetRotation(motherShipOffset, motherShip->m_angle);
		m_angle = motherShip->m_angle;
		m_Polygon2D.SetAngle(m_angle);
	}
	else
	{
		Ogre::Vector3 temp = Ogre::Vector3::ZERO;
		if(InputStateS::instance().isKeyPress(KEY_UP))		temp.y = dt * 140;
		if(InputStateS::instance().isKeyPress(KEY_DOWN))	temp.y = -dt * 140;
		if(InputStateS::instance().isKeyPress(KEY_RIGHT))	m_angle += dt * 30;
		if(InputStateS::instance().isKeyPress(KEY_LEFT))	m_angle -= dt * 30;

		Ogre::Vector3 trans = GetRotation(temp, m_angle);
		m_position += trans;
		m_Polygon2D.SetAngle(m_angle);
	}

	static float startvalue = 0;
	startvalue += dt;
	UpdateTower(dt);
	UpdateDataToDraw();
}

int MainPlane::UpdateTower(float dt)
{
	for (Towers::iterator it = m_Towers.begin();
		it != m_Towers.end();++it)
	{
		it->m_angle = m_angle-90;
		BallptrVector bv = it->Update(dt);
		if (!bv.empty())
		{
			for (BallptrVector::iterator bvit = bv.begin();
				bvit != bv.end(); ++bvit)
			{
				(**bvit).mPosition = GetRotation((**bvit).mPosition, m_angle);
				(**bvit).mPosition += m_position;
				size_t size = (**bvit).mPolygon2D.Points().size();
				(**bvit).mPolygon2D.Offset((**bvit).mPosition);
			}
			g_BallptrManager.AddBallptrs(bv);
			WavSoundS::instance().PlayDup(18);
		}
	}
	return 0;
}

void MainPlane::UpdateDataToDraw()
{
	m_pic.position.x = m_position.x;
	m_pic.position.y = m_position.y;
	m_pic.position.z = 0;
	m_pic.angle = m_angle;
	m_pic.size.x = (float)m_w;
	m_pic.size.y = (float)m_h;
}

MainPlane::MainPlane()
{
	m_Polygon2D.AddPoint(-200, 0);
	m_Polygon2D.AddPoint(-200, -100);
	m_Polygon2D.AddPoint(0, 150);
	m_Polygon2D.AddPoint(200, 0);
}


